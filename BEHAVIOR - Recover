package behaviorControl;

import lejos.hardware.Button;
import lejos.hardware.motor.Motor;
import lejos.hardware.motor.NXTRegulatedMotor;
import lejos.hardware.sensor.EV3TouchSensor;
import lejos.robotics.ColorAdapter;
import lejos.robotics.RangeFinderAdapter;
import lejos.robotics.TouchAdapter;
import lejos.robotics.navigation.MovePilot;
import lejos.robotics.subsumption.Behavior;

public class Recover implements Behavior 
{
	private boolean suppressed = false;
	private boolean keepControl = false;
	private boolean colorRecover = false;
	
	
	private final MovePilot pilot;
	private TouchAdapter[] touchAdapter = new TouchAdapter[2];
	private RangeFinderAdapter sonarAdapter = null;
	private ColorAdapter colorAdapter = null;

	private NXTRegulatedMotor servo = Motor.B;
	
	public Recover(RobotConfig rc)
	{
		pilot = rc.getPilot();
		
		if(rc.getTouch() != null)
		{
			EV3TouchSensor[] ev3Touch = rc.getTouch();
			for(int i = 0; i < touchAdapter.length; i++)
			{
				touchAdapter[i] = new TouchAdapter(ev3Touch[i]);
			}
		}
		
		if(rc.getSensor() != null)
		{
			sonarAdapter = new RangeFinderAdapter(rc.getSensor());
		}
		
		if(rc.getColor() != null)
		{
			colorAdapter = new ColorAdapter(rc.getColor());
		}
	}
	
	@Override
	public boolean takeControl() 
	{
		if(sonarAdapter != null)
		{
			if(sonarAdapter.getRange() <= 14)
			{
				keepControl = true;
				return true;
			}
		}
		
		if(touchAdapter[0] != null)
		{
			if(touchAdapter[0].isPressed() == true)//0 is the front bumper
			{
				keepControl = true;
				return true;
			}
		}
		if(touchAdapter[1] != null)
		{
			if(touchAdapter[1].isPressed() == true)//1 is the back bumper
			{
				keepControl = true;
				return true;
			}
		}
		
		if(colorAdapter != null)
		{
			//TODO implement the color adapter
			//if(colorAdapter.getColor() == )
			/*{
			    colorRecover = true;
				keepControl = true;
				return true;
			}*/
		}
		
		if(keepControl == true)
		{
			return true;
		}
		
		return false;
	}
	
	private void turnAction(short num)
	{
		if(num == 1)
		{
			pilot.travel(3, true);//move backwards 10
			servo.rotateTo(-90);
			
			if(sonarAdapter.getRange() >= 20)
			{
				pilot.rotate(90);
				pilot.stop();
				servo.rotateTo(0);
				keepControl = false;
			}
		}
		else if(num == 2)
		{
			servo.rotateTo(90);
			
			if(sonarAdapter.getRange() >= 20)
			{
				pilot.rotate(-90);
				pilot.stop();
				servo.rotateTo(0);
				keepControl = false;
			}
		}
		else if(num == 3)
		{
			servo.rotateTo(0, true);
			pilot.rotate(180);
			keepControl = false;
		}
	}

	private void colorAction()
	{
		//TODO path correction
		//keepControl = false//IMPORTANT
	}
	
	@Override
	public void action() 
	{
		Button.LEDPattern(2);
		suppressed = false;
		keepControl = true;
		
		if(colorRecover == false)
		{
			turnAction((short)1);
			
			if(keepControl)
			{
				turnAction((short)2);
			}
			
			if(keepControl)
			{
				turnAction((short)3);
			}
			
			if(keepControl)
			{
				throw new RuntimeException();
			}
		}
		else
		{
			colorAction();
		}
	}

	@Override
	public void suppress() 
	{
		suppressed = true;
	}
	
	public void setServo(NXTRegulatedMotor servo) 
	{
		this.servo = servo;//for later implementation
	}
	
	public static void main(String[] args)
	{
		//NOTHING GOES IN THE MAIN
		//It exists to make exporting jars to the robot easier.
	}
}
