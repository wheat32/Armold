//package [name];

import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.hardware.motor.Motor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.robotics.RangeFinderAdapter;
import lejos.robotics.chassis.Wheel;
import lejos.robotics.chassis.WheeledChassis;
import lejos.robotics.navigation.MovePilot;
import lejos.utility.Delay;

public class RovingTest2
{
	private MovePilot pilot;
	private EV3UltrasonicSensor sensor = new EV3UltrasonicSensor(SensorPort.S1);
	private RangeFinderAdapter sonar = new RangeFinderAdapter(sensor);
	
	private int numOfMovements = 4;
	
	private int defaultSpeed = 10;
	private int backUpSpeed = 8;
	
	private int defaultDistance = 160;
	private int backUpDistance = 16;
	
	public RovingTest2()
	{
		setUp();
	}
	
	public void setUp()
	{
		Wheel[] wheels = new Wheel[2];
		wheels[0] = WheeledChassis.modelWheel(Motor.A, 2.1).offset(70);
		wheels[1] = WheeledChassis.modelWheel(Motor.D, 2.1).offset(-70);
		WheeledChassis chassis = new WheeledChassis(wheels, WheeledChassis.TYPE_DIFFERENTIAL);
		
		pilot = new MovePilot(chassis);
		
		pilot.setMinRadius(6);	
		pilot.setAngularSpeed(5); // cm per second
		pilot.setLinearSpeed(defaultSpeed);  //do NOT surpass a speed of 15
		
		defaultDistance = -Math.abs(defaultDistance);//the robot must travel in a negative direction (because it is techinically backwards)
		backUpDistance = Math.abs(backUpDistance);//MUST be positive for reverse travel
		
		sensor.enable();
		
		testRove();
	}
	
	private void testRove()
	{
		Sound.beepSequence();
		
		System.out.println("Number of movements: " + numOfMovements);
		
		while(sonar.getRange() > 3)
		{
			if(Button.getButtons() == 4)
			{
				Sound.beep();
				numOfMovements--;
				System.out.println("\n\n\n\n\n\n\n\nNumber of movements: " + numOfMovements);
			}
			else if(Button.getButtons() == 1)
			{
				Sound.beep();
				numOfMovements++;
				System.out.println("\n\n\n\n\n\n\n\nNumber of movements: " + numOfMovements);
			}
			else if(Button.getButtons() == 2)
			{
				Sound.beep();
				break;
			}
			else if(Button.getButtons() == 32)
			{
				Sound.twoBeeps();
				System.exit(0);
			}
		}
		
		Delay.msDelay(3000);
		
		Sound.beepSequenceUp();  // make sound when ready.
		
		pilot.travel(defaultDistance, true);
		
		System.out.print("Moving...\n");
		
		//Motor.B.rotateTo(90);//remove comments for a servo test
		//Motor.B.rotateTo(0);//remove comments for a servo test
		//Motor.B.close();
		
		while(numOfMovements > 0)
		{
			if(Button.getButtons() == 32)//exit
			{
				Sound.twoBeeps();
				break;
			}
			
			if(sonar.getRange() <= 20)
			{
				numOfMovements--;
				
				if(numOfMovements > 0)
				{
					System.out.println("Distance traveled: " + pilot.getMovement().getDistanceTraveled());
					pilot.stop();
					
					Motor.B.rotateTo(90);
					Motor.B.close();
					if(sonar.getRange() > 20)
					{
						pilot.arc(pilot.getMinRadius(), -4);
					}
					else if(sonar.getRange() <= 20)
					{
						Motor.B.rotateTo(-90);
						Motor.B.close();
						if(sonar.getRange() > 20)
						{
							pilot.arc(pilot.getMinRadius(), 4);
						}
						else
						{
							pilot.setLinearSpeed(backUpSpeed);//goes to back-up speed
							pilot.travel(backUpDistance, false);
							pilot.setLinearSpeed(defaultSpeed);//goes back to default speed
							pilot.arc(pilot.getMinRadius(), 8);
						}
					}
					
					Motor.B.rotateTo(0);
					Motor.B.close();
					pilot.travel(defaultDistance, true);
				}
			}
			
			if(pilot.getMovement().getDistanceTraveled() <= -Math.abs(defaultDistance) && numOfMovements > 0)
			{
				//Sound.beep();
				Motor.B.rotateTo(-90);
				Motor.B.rotateTo(90);
				Motor.B.rotateTo(0);
				Motor.B.close();
				
				if(sonar.getRange() > 20)
				{
					pilot.travel(defaultDistance, true);
				}
				else
				{
					throw new RuntimeException("Robot stoppped near a wall. Gotta fix this.");
				}
			}
		}
		
		pilot.stop();
		Motor.B.rotateTo(0);
		Motor.B.close();
		
		System.out.println("Press any button to end.");
		Button.waitForAnyPress();
		System.exit(0);
	}
	
	public static void main(String[] args)
	{
		new RovingTest2();
	}
}
