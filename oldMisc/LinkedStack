//package

import java.util.Iterator;

import nep8189.arrayStructures.EmptyStructureException;
import nep8189.arrayStructures.Stack;

public class LinkedStack<Item> implements Stack<Item>
{
	private class Node
	{
		Item item;
		Node next;
	}
	
	private Node top;
	private int size;
	
	@Override
	public Iterator<Item> iterator() 
	{
		Iterator<Item> iterator = new Iterator<Item>()
		{
			private Node node = top;
			
			@Override
			public boolean hasNext() 
			{
				return node != null;
			}

			@Override
			public Item next() 
			{
				Item item = node.item;
				node = node.next;
				return item;
			}
			
		};
		
		return iterator;
	}

	/* (non-Javadoc)
	 * @see nep8189.arrayStructures.Stack#peek()
	 */
	@Override
	public Item peek() 
	{
		if(isEmpty())
		{
			throw new EmptyStructureException();
		}
		
		return top.item;
	}

	/* (non-Javadoc)
	 * @see nep8189.arrayStructures.Stack#push(java.lang.Object)
	 */
	@Override
	public void push(Item item) 
	{
		Node temp = top;
		top = new Node();
		top.item = item;
		top.next = temp;
	}

	/* (non-Javadoc)
	 * @see nep8189.arrayStructures.Stack#pop()
	 */
	@Override
	public Item pop() 
	{
		if(isEmpty())
		{
			throw new EmptyStructureException();
		}
		
		Item item = top.item;
		top = top.next;
		
		return item;
	}

	/* (non-Javadoc)
	 * @see nep8189.arrayStructures.Stack#isEmpty()
	 */
	@Override
	public boolean isEmpty() 
	{
		return size==0;//returns true or false depending on the value
	}

	/*FOR DEBUGGING
	public static void main(String[] args) 
	{
		Stack<String> stack = new LinkedStack<>();
		
		stack.push("It was");
		stack.push("the best");
		stack.push("of times");
		stack.push("It was");
		stack.push("the worst");
		stack.push("of times");
		
		for(String s : stack)
		{
			System.out.println(s);
		}
	}
	*/
}
